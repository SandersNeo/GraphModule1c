Перем RegExp;
Перем RegExpДоступны;
Перем СохраненныеСписки;

//RegExp --------------------------------------------------------

Функция РегулярныеВыражения_Выполнить(АнализируемыйТекст)

    РезультатАнализаСтроки = RegExp.Execute(АнализируемыйТекст);

    МассивВыражений = Новый Массив;

    Для Каждого Выражение Из РезультатАнализаСтроки Цикл
        СтруктураВыражение = Новый Структура ("Начало, Длина, Значение, ПодВыражения", 
												Выражение.FirstIndex, 
												Выражение.Length, 
												Выражение.Value);

        //Обработка подвыражений
        МассивПодВыражений = Новый Массив;
        Для Каждого ПодВыражение Из Выражение.SubMatches Цикл
            МассивПодВыражений.Добавить(ПодВыражение);
        КонецЦикла;
        СтруктураВыражение.ПодВыражения = МассивПодВыражений;

        МассивВыражений.Добавить (СтруктураВыражение);

    КонецЦикла;

    Возврат МассивВыражений;

КонецФункции

Функция РегулярныеВыражения_Проверка(ПроверяемыйТекст)

    Возврат RegExp.Test(ПроверяемыйТекст);

КонецФункции

Процедура РегулярныеВыражения_Инициализация (Шаблон, 
												ИскатьДоПервогоСовпадения = Истина, 
												МногоСтрок = Истина, 
												ИгнорироватьРегистр = Истина)

	Если RegExp = Неопределено Тогда //Нужна инициализация
		Попытка
        	RegExp = Новый COMОбъект("VBScript.RegExp");    // создаем объект для работы с регулярными выражениями
		Исключение
			RegExp = Неопределено;
			Возврат;
		КонецПопытки;
    КонецЕсли;

    //Заполняем данные
    RegExp.MultiLine = МногоСтрок;                  // истина — текст многострочный, ложь — одна строка
    RegExp.Global = Не ИскатьДоПервогоСовпадения;   // истина — поиск по всей строке, ложь — до первого совпадения
    RegExp.IgnoreCase = ИгнорироватьРегистр;        // истина — игнорировать регистр строки при поиске
    RegExp.Pattern = Шаблон;                        // шаблон (регулярное выражение)

КонецПроцедуры

//RegExp --------------------------------------------------------

Функция ВыражениеМодуль1с()
	Возврат "(Процедура|Функция)[\s]+([а-я|ё|Ё|\w]*)[\s]*\([а-я|ё|Ё|\w|\,]*\)[\s]*(Экспорт)*([а-я|ё|Ё|\w|0-1|\Q+-/=_;.,?\E|\s|\*|\(|\)|\""|\']*?)(КонецПроцедуры|КонецФункции)";
КонецФункции

Процедура КнопкаВыполнитьНажатие(Кнопка)
	Если Не ЗначениеЗаполнено(ПутьДоФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстФайла = ПолучитьТекстИзФайла();
	
	Если Не ЭтоМодуль1с(ТекстФайла) Тогда
		Возврат;
	КонецЕсли;
	
	Разбор = РегулярныеВыражения_Выполнить(ТекстФайла);
	МассивПроцедурФункций = ВыделитьПроцедурыФункции(Разбор);
КонецПроцедуры

Процедура ПутьДоФайлаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Фильтр = "Файл исходников(bsl)|*.bsl|Файл исходников(txt)|*.txt";
	Если Диалог.Выбрать() Тогда
		ПутьДоФайла = Диалог.ПолноеИмяФайла;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьТекстИзФайла()
	Чтение = Новый ЧтениеТекста;
	Чтение.Открыть(ПутьДоФайла);
	Текст = Чтение.Прочитать();
	Чтение.Закрыть();
	
	Возврат СтрЗаменить(Текст, Символы.ПС, "");
КонецФункции

Функция ЭтоМодуль1с(ТекстФайла)
	Возврат РегулярныеВыражения_Проверка(ТекстФайла);
КонецФункции

Процедура ПриОткрытии()
	РегулярныеВыражения_Инициализация(ВыражениеМодуль1с(), Ложь, Истина, Истина);
КонецПроцедуры

Функция ВыделитьПроцедурыФункции(РезультатРВ)
	Результат = Новый Массив;
	Для Каждого Эл Из РезультатРВ Цикл
		Врем = ИнициализироватьСтруктуру();
		Врем.Имя		= Эл.ПодВыражения[1];
		Врем.ЭтоФункция	= (ВРег(Эл.ПодВыражения[0]) = "ФУНКЦИЯ");
		Врем.Экспорт	= (ВРег(Эл.ПодВыражения[2]) = "ЭКСПОРТ");
		Результат.Добавить(Врем);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ИнициализироватьСтруктуру()
	Возврат Новый Структура("Имя, ЭтоФункция, Экспорт");
КонецФункции
